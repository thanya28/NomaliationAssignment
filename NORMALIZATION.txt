Normalization of ACADEMY



--  Streams Table
CREATE TABLE Streams (
    StreamID INT IDENTITY(1,1) PRIMARY KEY,
    StreamName VARCHAR(50)
);

--  Courses Table
CREATE TABLE Courses (
    CourseID INT IDENTITY(1,1) PRIMARY KEY,
    CourseName VARCHAR(100),
    StreamID INT,
    FOREIGN KEY (StreamID) REFERENCES Streams(StreamID)
);

--  Camps Table
CREATE TABLE Camps (
    CampID INT IDENTITY(1,1) PRIMARY KEY,
    CampNumber INT,
    CourseID INT,
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

--  Subjects Table
CREATE TABLE Subjects (
    SubjectID INT IDENTITY(1,1) PRIMARY KEY,
    SubjectName VARCHAR(100),
    CampID INT,
    FOREIGN KEY (CampID) REFERENCES Camps(CampID)
);

-- Certifications Table
CREATE TABLE Certifications (
    CertificationID INT IDENTITY(1,1) PRIMARY KEY,
    CertificationName VARCHAR(100),
    DateOfCertification DATE
);

-- Staff Table
CREATE TABLE Staff (
    StaffID INT IDENTITY(1,1) PRIMARY KEY,
    Name VARCHAR(100),
    Qualification VARCHAR(255)
);

--  Facilitators Table
CREATE TABLE Facilitators (
    FacilitatorID INT IDENTITY(1,1) PRIMARY KEY,
    Name VARCHAR(100),
    Qualification VARCHAR(255),
    CertificationID INT,
    StaffID INT,
    FOREIGN KEY (CertificationID) REFERENCES Certifications(CertificationID),
    FOREIGN KEY (StaffID) REFERENCES Staff(StaffID)
);

--  Batches Table
CREATE TABLE Batches (
    BatchID INT IDENTITY(1,1) PRIMARY KEY,
    BatchName VARCHAR(50),
    CourseID INT,
    FacilitatorID INT,
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),
    FOREIGN KEY (FacilitatorID) REFERENCES Facilitators(FacilitatorID)
);

-- Experience Table
CREATE TABLE Experience (
    ExperienceID INT IDENTITY(1,1) PRIMARY KEY,
    StaffID INT,
    FromYear date,
    ToYear date,
    CompanyName VARCHAR(100),
    Responsibility VARCHAR(255),
    FOREIGN KEY (StaffID) REFERENCES Staff(StaffID)
);

--  Students Table
CREATE TABLE Students (
    StudentID INT IDENTITY(1,1) PRIMARY KEY,
    S_Name VARCHAR(100),
    DOB DATE,
    Address VARCHAR(255),
    GuardianName VARCHAR(100),
    BatchID INT,
    FOREIGN KEY (BatchID) REFERENCES Batches(BatchID)
);

-- Attendance Table
CREATE TABLE Attendance (
    AttendanceID INT IDENTITY(1,1) PRIMARY KEY,
    StudentID INT,
    Date DATE,
    Status VARCHAR(10),
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID)
);

--  Marks Table
CREATE TABLE Marks (
    MarksID INT IDENTITY(1,1) PRIMARY KEY,
    StudentID INT,
    SubjectID INT,
    Marks INT,
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (SubjectID) REFERENCES Subjects(SubjectID)
);
-- 1. Streams Table
INSERT INTO Streams (StreamName) VALUES 
('MCA'), 
('Computer Science');

-- 2. Courses Table
INSERT INTO Courses (CourseName, StreamID) VALUES 
('DotNet', 1), 
('Python', 2);

-- 3. Camps Table
INSERT INTO Camps (CampNumber, CourseID) VALUES 
(101, 1), 
(102, 2);

-- 4. Subjects Table
INSERT INTO Subjects (SubjectName, CampID) VALUES 
('C# Programming', 1), 
('Data Science', 2);

-- 5. Certifications Table
INSERT INTO Certifications (CertificationName, DateOfCertification) VALUES 
('DotNet Developer Certified', '2023-08-15'), 
('Python Developer', '2024-02-10');

-- 6. Staff Table
INSERT INTO Staff (Name, Qualification) VALUES 
('Ahalya', 'M.Tech in Software Engineering'), 
('Karthika', 'M.Sc in Computer Science');

-- 7. Facilitators Table
INSERT INTO Facilitators (Name, Qualification, CertificationID, StaffID) VALUES 
('Anu', 'M.Tech in Software Engineering', 1, 1), 
('Karthik', 'M.Sc in Computer Science', 2, 2);

-- 8. Batches Table
INSERT INTO Batches (BatchName, CourseID, FacilitatorID) VALUES 
('Batch DotNet', 1, 1), 
('Batch Python', 2, 2);

-- 9. Experience Table
INSERT INTO Experience (StaffID, FromYear, ToYear, CompanyName, Responsibility) VALUES 
(1, '2018-01-01', '2022-12-31', 'Tech Solutions', 'Developer'), 
(2, '2019-01-01', '2023-12-31', 'Code Innovators', 'Trainer');

-- 10. Students Table
INSERT INTO Students (S_Name, DOB, Address, GuardianName, BatchID) VALUES 
('Rahul', '2002-05-10', 'KOLLAM', 'Anand', 1), 
('Divya', '2003-09-15', 'TVM', 'Ravi', 2);

-- 11. Attendance Table
INSERT INTO Attendance (StudentID, Date, Status) VALUES 
(1, '2024-12-01', 'Present'), 
(2, '2024-12-01', 'Absent');

-- 12. Marks Table
INSERT INTO Marks (StudentID, SubjectID, Marks) VALUES 
(1, 1, 90), 
(2, 2, 85);
---------------------------------------------------------------------------------------------------------------------------------
INVENTORY MANAGEMENT SYSTEM


create database iventorymgsystem

use iventorymgsystem
-- 1. Regions
CREATE TABLE Regions (
    Region_ID INT PRIMARY KEY,
    Region_Name VARCHAR(100) NOT NULL
);

-- 2. Warehouses
CREATE TABLE Warehouses (
    Warehouse_ID INT PRIMARY KEY,
    Warehouse_Name VARCHAR(100) NOT NULL,
    Location VARCHAR(255),
    Region_ID INT,
    FOREIGN KEY (Region_ID) REFERENCES Regions(Region_ID)
);

-- 3. Product Categories
CREATE TABLE Product_Categories (
    Category_ID INT PRIMARY KEY,
    Category_Name VARCHAR(100) NOT NULL
);

-- 4. Products
CREATE TABLE Products (
    Product_ID INT PRIMARY KEY,
    Product_Name VARCHAR(100) NOT NULL,
    Category_ID INT,
    Price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (Category_ID) REFERENCES Product_Categories(Category_ID)
);

-- 5. Inventories
CREATE TABLE Inventories (
    Inventory_ID INT PRIMARY KEY,
    Product_ID INT,
    Warehouse_ID INT,
    Quantity INT NOT NULL,
    FOREIGN KEY (Product_ID) REFERENCES Products(Product_ID),
    FOREIGN KEY (Warehouse_ID) REFERENCES Warehouses(Warehouse_ID)
);

-- 6. Customers
CREATE TABLE Customers (
    Customer_ID INT PRIMARY KEY,
    Customer_Name VARCHAR(100) NOT NULL,
    Contact_Number VARCHAR(15) NOT NULL,
    Email VARCHAR(100),
    Address VARCHAR(255),
    Credit_Limit DECIMAL(10, 2) NOT NULL
);

-- 7. Orders
CREATE TABLE Orders (
    Order_ID INT PRIMARY KEY,
    Customer_ID INT,
    Order_Date DATE NOT NULL,
    Total_Amount DECIMAL(10, 2) NOT NULL,
    Status VARCHAR(50),
    FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID)
);

-- 8. Order Details
CREATE TABLE Order_Details (
    Order_Detail_ID INT PRIMARY KEY,
    Order_ID INT,
    Product_ID INT,
    Quantity INT NOT NULL,
    Subtotal DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (Order_ID) REFERENCES Orders(Order_ID),
    FOREIGN KEY (Product_ID) REFERENCES Products(Product_ID)
);

-- 9. Employees
CREATE TABLE Employees (
    Employee_ID INT PRIMARY KEY,
    Employee_Name VARCHAR(100) NOT NULL,
    Contact_Number VARCHAR(15),
    Email VARCHAR(100),
    Assigned_Orders INT
);

-- 10. Order Tracking
CREATE TABLE Order_Tracking (
    Tracking_ID INT PRIMARY KEY,
    Employee_ID INT,
    Order_ID INT,
    Tracking_Status VARCHAR(50),
    FOREIGN KEY (Employee_ID) REFERENCES Employees(Employee_ID),
    FOREIGN KEY (Order_ID) REFERENCES Orders(Order_ID)
);

-- 11. Suppliers
CREATE TABLE Suppliers (
    Supplier_ID INT PRIMARY KEY,
    Supplier_Name VARCHAR(100) NOT NULL,
    Contact_Number VARCHAR(15),
    Address VARCHAR(255),
    Email VARCHAR(100)
);

-- Insert Data in Order of Dependencies

-- Regions
INSERT INTO Regions (Region_ID, Region_Name) 
VALUES (1, 'North'), (2, 'South');

-- Warehouses
INSERT INTO Warehouses (Warehouse_ID, Warehouse_Name, Location, Region_ID) 
VALUES (1, 'warhouse1', 'Chennai', 1), (2, 'Warehouse2', 'TVM', 2);

-- Product Categories
INSERT INTO Product_Categories (Category_ID, Category_Name) 
VALUES (1, 'Electronics'), (2, 'Furniture');

-- Products
INSERT INTO Products (Product_ID, Product_Name, Category_ID, Price) 
VALUES (1, 'Laptop', 1, 70000), (2, 'Bed', 2, 3000);

-- Inventories
INSERT INTO Inventories (Inventory_ID, Product_ID, Warehouse_ID, Quantity) 
VALUES (1, 1, 1, 50), (2, 2, 2, 100);

-- Customers
INSERT INTO Customers (Customer_ID, Customer_Name, Contact_Number, Email, Address, Credit_Limit) 
VALUES (1, 'Bobi', '9487507918', 'bobi@gmail.com', 'KOllam', 100000), 
       (2, 'Anu', '8893672890', 'anu@gmail.com', 'TVM', 50000);

-- Orders
INSERT INTO Orders (Order_ID, Customer_ID, Order_Date, Total_Amount, Status) 
VALUES (1, 1, '2024-12-15', 52000, 'Completed'), 
       (2, 2, '2024-12-16', 4000, 'Completed');

-- Order Details
INSERT INTO Order_Details (Order_Detail_ID, Order_ID, Product_ID, Quantity, Subtotal) 
VALUES (1, 1, 1, 1, 50000), (2, 2, 2, 2, 4000);

-- Employees
INSERT INTO Employees (Employee_ID, Employee_Name, Contact_Number, Email, Assigned_Orders) 
VALUES (1, 'Monika', '6789036578', 'monika@gmail.com', 1), 
       (2, 'Anamika', '9980836218', 'anamika@gmail.com', 2);

-- Order Tracking
INSERT INTO Order_Tracking (Tracking_ID, Employee_ID, Order_ID, Tracking_Status) 
VALUES (1, 1, 1, 'In Progress'), (2, 2, 2, 'Completed');

-- Suppliers
INSERT INTO Suppliers (Supplier_ID, Supplier_Name, Contact_Number, Address, Email) 
VALUES (1, 'AJProducts', '9000123546', 'Chennai', 'aj123@gmail.com'), 
       (2, 'AP Products', '9807626734', 'Trichy', 'approducts@gmail.com');